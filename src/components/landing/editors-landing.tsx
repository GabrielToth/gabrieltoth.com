"use client"

import Footer from "@/components/layout/footer"
import { type Locale } from "@/lib/i18n"
import {
    Award,
    CheckCircle,
    Clock,
    DollarSign,
    Edit3,
    Users,
} from "lucide-react"
import { useState } from "react"
import ApplicationForm from "./application-form"

interface EditorsLandingProps {
    locale: Locale
}

const getTranslations = (locale: Locale) => {
    const isPortuguese = locale === "pt-BR"
    return {
        hero: {
            badge: isPortuguese
                ? "üé¨ Oportunidade de Editor"
                : "üé¨ Editor Opportunity",
            title: isPortuguese
                ? "Trabalhe Como Editor e Ganhe 90% do AdSense"
                : "Work as Editor and Earn 90% of AdSense",
            subtitle: isPortuguese
                ? "Modelo √∫nico de pagamento por performance. Quanto melhor for o seu trabalho, mais voc√™ ganha. Sem sal√°rio fixo, sem limites de ganhos."
                : "Unique performance-based payment model. The better your work, the more you earn. No fixed salary, no earning limits.",
            cta: isPortuguese ? "Aplicar Agora" : "Apply Now",
        },
        benefits: {
            title: isPortuguese
                ? "Por Que Trabalhar Conosco?"
                : "Why Work With Us?",
            items: [
                {
                    icon: DollarSign,
                    title: isPortuguese
                        ? "90% do AdSense dos Seus V√≠deos"
                        : "90% of AdSense from Your Videos",
                    description: isPortuguese
                        ? "Receba 90% de todo o AdSense gerado pelos v√≠deos que voc√™ editar"
                        : "Receive 90% of all AdSense generated by videos you edit",
                },
                {
                    icon: Clock,
                    title: isPortuguese
                        ? "Flexibilidade Total"
                        : "Total Flexibility",
                    description: isPortuguese
                        ? "Trabalhe no seu hor√°rio, no seu ritmo"
                        : "Work on your schedule, at your pace",
                },
                {
                    icon: Award,
                    title: isPortuguese ? "Crescimento Real" : "Real Growth",
                    description: isPortuguese
                        ? "Feedback construtivo e mentoria para evoluir"
                        : "Constructive feedback and mentoring to evolve",
                },
                {
                    icon: Users,
                    title: isPortuguese
                        ? "Equipe Colaborativa"
                        : "Collaborative Team",
                    description: isPortuguese
                        ? "Fa√ßa parte de uma comunidade de editores"
                        : "Be part of a community of editors",
                },
            ],
        },
        requirements: {
            title: isPortuguese ? "Requisitos B√°sicos" : "Basic Requirements",
            items: [
                isPortuguese
                    ? "Conhecimento em softwares de edi√ß√£o"
                    : "Knowledge of editing software",
                isPortuguese
                    ? "Portf√≥lio com trabalhos anteriores"
                    : "Portfolio with previous work",
                isPortuguese
                    ? "Responsabilidade e compromisso"
                    : "Responsibility and commitment",
                isPortuguese
                    ? "Criatividade e aten√ß√£o aos detalhes"
                    : "Creativity and attention to detail",
            ],
        },
        application: {
            title: isPortuguese
                ? "Pronto Para Come√ßar?"
                : "Ready to Get Started?",
            subtitle: isPortuguese
                ? "Envie sua aplica√ß√£o via Discord"
                : "Send your application via Discord",
            button: isPortuguese ? "Aplicar Como Editor" : "Apply as Editor",
        },
    }
}

export default function EditorsLanding({ locale }: EditorsLandingProps) {
    const t = getTranslations(locale)
    const [showForm, setShowForm] = useState(false)

    return (
        <div className="min-h-screen bg-white dark:bg-gray-900">
            {/* Hero Section */}
            <section className="py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-green-50 to-emerald-100 dark:from-gray-900 dark:to-green-900">
                <div className="max-w-7xl mx-auto text-center">
                    <div className="inline-flex items-center px-4 py-2 rounded-full bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 text-sm font-medium mb-8">
                        {t.hero.badge}
                    </div>
                    <h1 className="text-4xl sm:text-6xl font-bold text-gray-900 dark:text-white mb-6">
                        {t.hero.title}
                    </h1>
                    <p className="text-xl text-gray-600 dark:text-gray-300 mb-8 max-w-4xl mx-auto">
                        {t.hero.subtitle}
                    </p>
                    <button
                        onClick={() => setShowForm(true)}
                        className="inline-flex items-center px-8 py-4 bg-green-600 text-white rounded-lg font-semibold hover:bg-green-700 transition-colors text-lg"
                    >
                        <Edit3 className="mr-2" size={20} />
                        {t.hero.cta}
                    </button>
                </div>
            </section>

            {/* Benefits Section */}
            <section className="py-20 px-4 sm:px-6 lg:px-8">
                <div className="max-w-7xl mx-auto">
                    <div className="text-center mb-16">
                        <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
                            {t.benefits.title}
                        </h2>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
                        {t.benefits.items.map((benefit, index) => (
                            <div
                                key={index}
                                className="bg-white dark:bg-gray-900 rounded-2xl p-6 shadow-lg text-center"
                            >
                                <div className="bg-green-100 dark:bg-green-900 w-12 h-12 rounded-lg flex items-center justify-center mx-auto mb-4">
                                    <benefit.icon className="w-6 h-6 text-green-600 dark:text-green-400" />
                                </div>
                                <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">
                                    {benefit.title}
                                </h3>
                                <p className="text-gray-600 dark:text-gray-300 text-sm">
                                    {benefit.description}
                                </p>
                            </div>
                        ))}
                    </div>
                </div>
            </section>

            {/* Requirements Section */}
            <section className="py-20 px-4 sm:px-6 lg:px-8 bg-gray-50 dark:bg-gray-800">
                <div className="max-w-7xl mx-auto">
                    <div className="text-center mb-16">
                        <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
                            {t.requirements.title}
                        </h2>
                    </div>
                    <div className="bg-white dark:bg-gray-900 rounded-2xl p-8 shadow-lg max-w-4xl mx-auto">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            {t.requirements.items.map((requirement, index) => (
                                <div
                                    key={index}
                                    className="flex items-start space-x-3"
                                >
                                    <CheckCircle className="w-5 h-5 text-green-500 mt-1 flex-shrink-0" />
                                    <span className="text-gray-600 dark:text-gray-300">
                                        {requirement}
                                    </span>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            </section>

            {/* Application Section */}
            {showForm ? (
                <section className="py-20 px-4 sm:px-6 lg:px-8">
                    <div className="max-w-7xl mx-auto">
                        <div className="text-center mb-12">
                            <button
                                onClick={() => setShowForm(false)}
                                className="mb-8 text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300 font-medium"
                            >
                                ‚Üê {locale === "pt-BR" ? "Voltar" : "Back"}
                            </button>
                            <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
                                {t.application.title}
                            </h2>
                        </div>

                        <ApplicationForm
                            locale={locale}
                            type="editor-application"
                        />
                    </div>
                </section>
            ) : (
                <section className="py-20 px-4 sm:px-6 lg:px-8 bg-green-600 text-white">
                    <div className="max-w-4xl mx-auto text-center">
                        <h2 className="text-3xl font-bold mb-4">
                            {t.application.title}
                        </h2>
                        <p className="text-xl mb-8 opacity-90">
                            {t.application.subtitle}
                        </p>
                        <button
                            onClick={() => setShowForm(true)}
                            className="inline-flex items-center px-8 py-4 bg-white text-green-600 rounded-lg font-semibold hover:bg-gray-100 transition-colors text-lg"
                        >
                            <Edit3 className="mr-2" size={20} />
                            {t.application.button}
                        </button>
                    </div>
                </section>
            )}
            <Footer locale={locale} />
        </div>
    )
}
